name: iOS Release

on:
  workflow_dispatch:

jobs:
  # --------------------------------------------
  # iOS: Local EAS build on macOS using EAS-managed (remote) credentials
  # --------------------------------------------
  build-ios:
    runs-on: macos-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "latest-stable"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build shared types
        run: npm run -w types-party-battle build

      - name: Cache Expo prebuild
        uses: actions/cache@v4
        id: expo-prebuild-cache-ios
        with:
          path: |
            frontend-party-battle/android
            frontend-party-battle/ios
          key: expo-prebuild-${{ runner.os }}-${{ hashFiles('package-lock.json', 'frontend-party-battle/package*.json', 'frontend-party-battle/app.config.ts') }}
          restore-keys: |
            expo-prebuild-${{ runner.os }}-

      - name: Prebuild native iOS project
        if: steps.expo-prebuild-cache-ios.outputs.cache-hit != 'true'
        working-directory: ./frontend-party-battle
        run: npx expo prebuild --platform ios --non-interactive

      - name: Install EAS CLI
        run: npm i -g eas-cli@16.18.0

      # Local build that fetches signing from EAS-managed credentials (credentialsSource: remote)
      - name: EAS local iOS build (managed creds)
        working-directory: ./frontend-party-battle
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          mkdir -p ../dist/ios
          npx eas-cli build --platform ios --profile production --local --non-interactive --output ../dist/ios/app.ipa

      - name: Upload iOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-release
          path: dist/ios/app.ipa
          if-no-files-found: error

  # --------------------------------------------
  # iOS: Deploy to App Store
  # --------------------------------------------
  deploy-ios:
    needs: build-ios
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: ios-release
          path: dist/ios

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build shared types
        run: npm run -w types-party-battle build

      - name: Install EAS CLI
        run: npm i -g eas-cli@16.18.0

      - name: Prepare ASC API Key
        env:
          ASC_API_KEY_JSON_BASE64: ${{ secrets.ASC_API_KEY_JSON_BASE64 }}
        run: |
          echo "$ASC_API_KEY_JSON_BASE64" | base64 --decode > asc-api-key.json
          echo "Wrote asc-api-key.json"

      - name: Verify ASC API Key file
        run: |
          set -euo pipefail
          ls -la .
          test -f asc-api-key.json || (echo "asc-api-key.json not found" && exit 1)
          # Validate required fields
          jq -e 'has("key_id") and has("issuer_id") and has("key")' asc-api-key.json >/dev/null || (echo "asc-api-key.json missing required fields key_id/issuer_id/key" && exit 1)
          echo "key_id: $(jq -r .key_id asc-api-key.json)"
          echo "issuer_id: $(jq -r .issuer_id asc-api-key.json)"
          # Show PEM header/footer and a small sample to confirm literal \n are present
          jq -r .key asc-api-key.json | head -n1
          jq -r .key asc-api-key.json | tail -n1
          echo "First 80 chars:"
          jq -r .key asc-api-key.json | head -c 80; echo
          # Optional: OpenSSL sanity check (won't output the key)
          python3 - << 'PY'
          import json, sys, base64
          from pathlib import Path
          from cryptography.hazmat.primitives import serialization
          try:
              key = json.loads(Path("asc-api-key.json").read_text())["key"].encode()
              serialization.load_pem_private_key(key, password=None)
              print("PEM parsed OK")
          except Exception as e:
              print(f"PEM parse failed: {e}")
              sys.exit(1)
          PY

      - name: Submit to App Store Connect
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          npx eas-cli submit -p ios --path dist/ios/app.ipa --non-interactive --profile production

