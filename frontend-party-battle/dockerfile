ARG NODE_VERSION=24-alpine

# Dependencies stage: install production dependencies only
FROM node:${NODE_VERSION} AS deps
WORKDIR /app

COPY package.json package-lock.json ./
COPY types-party-battle/package.json types-party-battle/package.json
COPY frontend-party-battle/package.json frontend-party-battle/package.json
RUN npm ci --omit=dev --workspace=types-party-battle --workspace=frontend-party-battle --include-workspace-root=false

# Build stage: install all deps and build the packages
FROM node:${NODE_VERSION} AS builder
WORKDIR /app

COPY package.json package-lock.json ./
COPY types-party-battle types-party-battle
COPY frontend-party-battle frontend-party-battle
RUN npm ci --workspace=types-party-battle --workspace=frontend-party-battle --include-workspace-root=false

# Build the types package first (dependency for frontend)
RUN npm run build --workspace=types-party-battle

# Build the frontend package
WORKDIR /app/frontend-party-battle
RUN npx expo export -p web

# Production stage
FROM nginx:stable-alpine

# Copy nginx config to handle SPA routing
COPY frontend-party-battle/nginx.conf /etc/nginx/conf.d/default.conf

# Copy built assets from builder stage
COPY --from=builder /app/frontend-party-battle/dist /usr/share/nginx/html

EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
